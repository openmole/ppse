package ppse.em

import better.files.File
import breeze.linalg.Matrix.*
import breeze.linalg.Vector.*
import breeze.linalg.*
import breeze.numerics.*
import org.apache.commons.math3.distribution.{MixtureMultivariateNormalDistribution, MultivariateNormalDistribution, NormalDistribution}
import org.apache.commons.math3.linear.{CholeskyDecomposition, DiagonalMatrix, NonPositiveDefiniteMatrixException}
import org.apache.commons.math3.util.Pair
import ppse.tool.Breeze

import scala.annotation.tailrec
import scala.jdk.CollectionConverters.SeqHasAsJava
import scala.util.Random
import util.{Failure, Success, Try}

/**
 * Weighted-data Gaussian mixture model (WDF-GMM) with Fixed weight implementation.
 * https://team.inria.fr/perception/research/wdgmm/
 * Gebru, I. D., Alameda-Pineda, X., Forbes, F., & Horaud, R. (2016). EM Algorithms for Weighted-Data Clustering with Application to Audio-Visual Scene Analysis. IEEE Transactions on Pattern Analysis and Machine Intelligence, 38(12), 2402â€“2415. doi:10.1109/tpami.2016.2522425
 */
object WDFEMGMM  {


  def scale(means: Array[Array[Double]], variances: Array[Array[Array[Double]]], factor: Double) =
    def scaledMeans = means.map(_.map(_ * factor))
    val factorSq = math.pow(factor, 2)
    def scaledVariances = variances.map(_.map(_.map(_ * factorSq)))
    (scaledMeans, scaledVariances)

  /**
   * Full covariance Gaussian Mixture Model, trained using Expectation Maximization.
   *
   * @param x data points
   */
  def initializeAndFit(
    iterations: Int,
    tolerance: Double,
    x: Array[Array[Double]],
    dataWeights: Option[Array[Double]] = None,
    minClusterSize: Int,
    random: Random): Try[(GMM, Seq[Double])] =

    scribe.debug:
      "WDFEMGMM:initializeAndFit"

    def dataWeigthsValue = dataWeights.getOrElse(x.map(_ => 1.0 / x.length))

    // initialize parameters using KMeans
    val (means, covariances, weights) = Clustering.build(x, minClusterSize, Some(dataWeigthsValue))
//      Try{Clustering.build(x, dataWeigthsValue, minClusterSize)} match
//        case Success(v) => v
//        case Failure(e) =>
//          println("fail:")
//          e.printStackTrace()
//          Clustering.build(x, dataWeigthsValue, minClusterSize)

    assert(covariances.forall(_.forall(_.forall(!_.isNaN))),s"covariances with nan: ${covariances.mkString("\n")}")

    val res = fit(
      x = x,
      dataWeights = dataWeigthsValue,
      gmm = GMM(means = means, covariances = covariances, weights = weights),
      iterations = iterations,
      tolerance = tolerance,
      trace = IndexedSeq()
    )

    if res.isFailure
    then scribe.debug("failure : " + res)

    res

  def toDistribution(gmm: GMM, random: Random): MixtureMultivariateNormalDistribution = {
    import org.apache.commons.math3.distribution._
    import org.apache.commons.math3.util._

    import scala.jdk.CollectionConverters._

    def dist = (gmm.means zip gmm.covariances).map { case (m, c) =>  new MultivariateNormalDistribution(m, c) }
    def pairs = (dist zip gmm.weights).map { case (d, w) => new Pair(java.lang.Double.valueOf(w), d) }.toList

    assert(pairs.nonEmpty, s"Empty pairs for size ${gmm.means.size}")
    new MixtureMultivariateNormalDistribution(
      mgo.tools.apacheRandom(random),
      pairs.asJava
    )
  }

  @tailrec
  def fit(
    x: Array[Array[Double]],
    dataWeights: Array[Double],
    gmm: GMM,
    iterations: Int,
    tolerance: Double,
    logLikelihood: Double = 0.0,
    trace: Seq[Double] = Seq()): Try[(GMM, Seq[Double])] =

    iterations match 
      case 0 => Success((gmm, trace))
      case i =>
        eStep(x, dataWeights, gmm.means, gmm.covariances, gmm.weights) match {
          case Success((updatedLogLikelihood, resp)) =>
            val updatedGMM = mStep(x, dataWeights, resp, gmm.size)
            if (math.abs(updatedLogLikelihood - logLikelihood) <= tolerance) Success((gmm, trace :+ updatedLogLikelihood))
            else fit(
              x = x,
              dataWeights = dataWeights,
              gmm = updatedGMM,
              logLikelihood = updatedLogLikelihood,
              iterations = i - 1,
              tolerance = tolerance,
              trace = trace :+ updatedLogLikelihood)
          case Failure(e) => Failure(e)
        }


  /**
   * Estimate a covariance matrix, given data.
   * @param x data points
   */
  def cov(x: DenseMatrix[Double]): DenseMatrix[Double] = {
    val mean = sum(x(::, *)) /:/ x.rows.toDouble
    val tmp = DenseMatrix.tabulate(x.rows, x.cols)((_,j)=>mean(j))
    val m = (x - tmp).toDenseMatrix
    val p = m.t * m
    (p /:/ (x.rows - 1).toDouble).toDenseMatrix
  }
  /**
   * Estimate a covariance matrix, given data.
   * @param x data points
   */
  def cov(x: DenseMatrix[Double], mean: DenseVector[Double]): DenseMatrix[Double] = {
    val q = DenseMatrix.tabulate(x.cols,x.cols)((j,k)=>Array.tabulate(x.rows)(i=>(x(i,j)-mean(j))*(x(i,k)-mean(k))).sum)
    (q /:/ (x.rows - 1).toDouble).toDenseMatrix
  }
  /**
   * E-step: compute responsibilities,
   * update resp matrix so that resp[j, k] is the responsibility of cluster k for data point j,
   * to compute likelihood of seeing data point j given cluster k.
   *
   * @param x data points
   * @param means means of the components (clusters)
   * @param covariances covariances of the components (clusters)
   * @param weights weights of the components (clusters)
   */
  def eStep(
    x: Array[Array[Double]],
    dataWeights: Array[Double],
    means: Array[Array[Double]],
    covariances: Array[Array[Array[Double]]],
    weights: Array[Double]): Try[(Double, Array[Array[Double]])] = {
    // for each point and each component
    // the matrix containing the probability of point i for component k multiplied by the weight (coefficient) of component k
    assert(weights.forall(p=> p <= 1.0 && p >= 0), s"weights=${weights.mkString(",")}")
    //assert(dataWeights.forall(p=> p >= 1.0), s"dataweights=${dataWeights}")
    //assert(x.rows>10,s"data=$x")
    compute_log_likelihood(Breeze.arrayToDenseMatrix(x), Breeze.arrayToDenseVector(dataWeights), Breeze.arrayToDenseMatrix(means), covariances.map(Breeze.arrayToDenseMatrix), Breeze.arrayToDenseVector(weights)) map { resp =>
      //assert(resp.forall(p=> p > 0), s"RESP=${resp}")
      // for each point, the sum of all likelihoods for all components
      val resp_sum = sum(resp(*, ::))
      //println(s"resp_sum=$resp_sum")
      val log_likelihood = sum(log(resp_sum))
      // divide the responsibility by the sum for each point
      val updatedResp = Array.tabulate(resp.rows, resp.cols)((i,j)=>resp(i,j) / (if (resp_sum(i) == 0) 1.0 else resp_sum(i)))
      //assert(updatedResp.forall(_.forall(p=> p <= 1.0 && p >= 0)),s"UPDATED_RESP (${updatedResp.rows},${updatedResp.cols}) =${updatedResp}")
      // assert(sum(updatedResp(*, ::)).forall(p=> p==1.0),s"sums=${sum(updatedResp(*, ::))}")
      (log_likelihood, updatedResp)
    }
  }

  def toDenseMatrix(rows: Int, cols: Int, array: Array[Array[Double]]): DenseMatrix[Double] = {
    // we need to transpose the array first because of breeze column first representation of matrices
    DenseMatrix.create(rows, cols, array.transpose.flatten)
  }

  /**
   * Compute the log likelihood (used for e step).
   * @param x data points
   * @param means means of the components (clusters)
   * @param covariances covariances of the components (clusters)
   * @param weights weights of the components (clusters)
   */
  def compute_log_likelihood(
    x: DenseMatrix[Double],
    dataWeights: DenseVector[Double],
    means: DenseMatrix[Double],
    covariances: Array[DenseMatrix[Double]],
    weights: DenseVector[Double]): Try[DenseMatrix[Double]] = Try {
    import org.apache.commons.math3.linear.{Array2DRowRealMatrix, EigenDecomposition}
    import org.apache.commons.math3.util.FastMath

    DenseMatrix.tabulate(x.rows, weights.length) { (i, k) =>
      val weightedCovariances = covariances(k) /:/ dataWeights(i)
      val determinant = det(weightedCovariances)
      val mMeans = means(k, ::).inner.toArray
      val dimension = mMeans.size
      val covarianceArray =  Breeze.matrixToArray(weightedCovariances)

      def density(vals: Array[Double], cholesky: Boolean = false) = {
        def covarianceMatrixInverse = {
          val covarianceMatrix = new Array2DRowRealMatrix(covarianceArray)
          //println("matrix = "+covarianceMatrix)
          val covMatDec = new CholeskyDecomposition(covarianceMatrix)
          //println("covMatDec = "+covMatDec)
          covMatDec.getSolver.getInverse
        }

        def getExponentTerm(values: Array[Double]) = {
          val centered = Array.tabulate(values.length) { i => values(i) - mMeans(i)}
          val preMultiplied = covarianceMatrixInverse.preMultiply(centered)
          //println("preMultiplied = "+preMultiplied)

          var sum: Double = 0
          for (i <- 0 until preMultiplied.length) {
            sum += preMultiplied(i) * centered(i)
          }

          FastMath.exp(-0.5 * sum)
        }

        FastMath.pow(2 * FastMath.PI, -0.5 * dimension) * FastMath.pow(determinant, -0.5) * getExponentTerm(vals)
      }

      density(x(i, ::).inner.toArray, cholesky = true) * weights(k)
    }
  }

  /**
   * M-step, update parameters.
   * @param X data points
   */
  def mStep(x: Array[Array[Double]], dataWeights: Array[Double], resp: Array[Array[Double]], components: Int): GMM = {
    // sum the columns to get total responsibility assigned to each cluster, N^{soft}
    val xMatrix = Breeze.arrayToDenseMatrix(x)
    val resp_t = Breeze.arrayToDenseMatrix(resp).t
    val component_weights = sum(resp_t(*, ::))
    // normalized weights (mixture coefficients)
    val weights = component_weights /:/ xMatrix.rows.toDouble
    // means
    // for all components : the sum of the product of responsibility by point values weighted by point weight
    val weighted_sum = resp_t * DenseMatrix.tabulate(xMatrix.rows, xMatrix.cols)((i,j) => xMatrix(i,j) * dataWeights(i))
    // for all components : the sum of the product of responsibility by point weight
    val weighted_resp = resp_t * Breeze.arrayToDenseVector(dataWeights).toDenseMatrix.t
    val means = DenseMatrix.tabulate(weighted_sum.rows, weighted_sum.cols)((i,j) => weighted_sum(i,j) / weighted_resp(i,0))
    // covariance
//    println(s"components = $components")

    val covariances = Array.tabulate(components) { k =>
      val mean = means(k, ::)
      val w_sum = DenseMatrix.tabulate(xMatrix.cols, xMatrix.cols){
        (covRow, covCol)=>Array.tabulate(xMatrix.rows){ i=> (xMatrix(i,covRow) - mean(covRow)) * (xMatrix(i,covCol) - mean(covCol)) * resp_t(k,i) * dataWeights(i) }.sum
      }
      w_sum /:/ component_weights(k)
    }
    GMM(weights = Breeze.vectorToArray(weights), means = Breeze.matrixToArray(means), covariances = covariances.map(Breeze.matrixToArray))
  }

  /**
   * 2d matrix dot product.
   * @param A matrix A
   * @param B matrix B
   */
  def dot(A: Array[Array[Double]], B: Array[Array[Double]]): Array[Array[Double]] =
    Array.tabulate(A.length)(i=>B.indices.map(j=>B(j).map(_*A(i)(j))).transpose.map(_.sum).toArray)

}

object WDFEMGMMTest extends App {

  def toString2dArray(a: Array[Array[Double]]) = {
    a.map { l => "[" + l.map(_.toString).mkString(" ") + "]" }.mkString("[", "\n ", "]")
  }

  def toString3dArray(a: Array[Array[Array[Double]]]) = {
    a.map { l => "[" + l.map{m=>{"[" + m.map(_.toString).mkString(" ") + "]"}}.mkString("\n  ") + "]" }.mkString("[", "\n\n ", "]")
  }

//  val X = Array(Array(2.9950759564306697, -1.0055741034238972), Array(0.7479891289410167, 3.4061133326887827), Array(8.846441329566778, 8.316132503410918), Array(1.0805947634356168, 0.464650855113123), Array(9.033875954766113, 10.324144568455091), Array(3.807744002270482, 1.947623890456838), Array(9.812840143847186, 8.465903774379214), Array(0.7426401613000564, 0.32892831358354846), Array(10.372735784451201, 9.940388865729723), Array(2.800370716654565, 2.0912182570811124), Array(7.819534460384736, 8.99686682407948), Array(0.8169646156226069, 1.6914024686795033), Array(-0.07492020105488195, 0.5161335349562824), Array(0.36910905641259084, 1.175563440223202), Array(0.6198066352121391, -0.01351508473461105), Array(1.0443060325563125, -0.29928993467874454), Array(1.6942695525200986, 2.2933809604809414), Array(1.3797225441203906, 1.0080709047255687), Array(7.99509906563072, 9.837987947983786), Array(8.710969643841004, 8.941557752235815), Array(9.666334564323913, 7.633434819195421), Array(1.821835153159473, 0.9962421200691987), Array(7.265044423226065, 8.010439030139825), Array(-0.38959913141161673, 1.2177169641507688), Array(10.385632877109348, 9.226064879359972), Array(6.209786472336413, 9.445989116035262), Array(7.631872615024059, 8.800615694621134), Array(0.37796541914730464, 2.77690530251572), Array(1.013710896143859, -0.5276744237555406), Array(-0.16631812822699854, 0.606477368086052), Array(1.2109964983950317, 2.6456666102690214), Array(10.809944128632313, 8.221654545142433), Array(10.150811013143036, 9.74563830352622), Array(8.482525966006571, 9.115859150870588), Array(0.9716066807540801, 1.2405517772034298), Array(10.968877418551823, 9.123619939835297), Array(8.832434826917924, 10.117464123377943), Array(8.677812023717312, 8.040519111864624), Array(0.03183257389092442, 2.3234093967363565), Array(9.190488199889364, 9.199686990085642), Array(10.494906991204054, 7.237557555026802), Array(-0.21473025179984062, 0.36025574044687025), Array(9.855944388281587, 9.541450822468605), Array(2.0285578009668033, -0.13226696521812853), Array(0.6582632652855578, 0.045324932231016524), Array(1.4714418860103835, 0.7242556283750092), Array(9.380284279635543, 8.547087977015835), Array(-0.15061752525703453, 0.8577712540796392), Array(8.573827978645662, 9.229950369275086), Array(2.360483224488835, -0.3499928326663011), Array(8.62421339044847, 8.65199330170577), Array(10.988900197116967, 8.958288446741356), Array(9.902819611521878, 9.124396672325396), Array(0.08491165176749726, 1.241658836297318), Array(7.723020896836277, 10.315615216004167), Array(9.759258990850146, 9.289910839840749), Array(1.2854341606035375, 0.3635481130564481), Array(1.2493988242356044, 2.0162160486052665), Array(8.164411475537621, 9.427147606204331), Array(2.5153976794568154, 1.9272993794155684), Array(1.4282279054994802, 1.3706239744132658), Array(9.766614396787377, 8.97723585275176), Array(1.2848946999620614, 1.0815569169795678), Array(-0.26954054247821246, 1.8904027430365176), Array(0.37188702952692865, -1.4977771825612605), Array(1.4771521508253131, 0.7127106187104035), Array(10.17632143970533, 9.29332737809705), Array(1.9123726114614858, 1.967753363915194), Array(0.8319956582565488, -0.1150375347096313), Array(8.704035225773012, 8.428838185571692), Array(-0.8016609135621251, 1.4441796118433121), Array(8.567209213820544, 9.612027612607948), Array(9.377793206212095, 9.541940103758876), Array(0.8181387675690632, 0.39489000774872807), Array(0.9460883177802127, 1.2306393750005298), Array(8.51836818753757, 9.746523965152557), Array(0.9804926812089553, 2.1720921164530003), Array(9.39613237879598, 9.378015572075986), Array(10.833094173754263, 9.465010541165087), Array(8.530014167236407, 7.809735744349096), Array(9.893319472580819, 7.698312753386716), Array(4.115213781322446, 0.2915736453393507), Array(-0.21414166750989505, 0.7185462896083825), Array(7.725206367047384, 8.285697336132687), Array(8.510764424452319, 8.6903098775974), Array(2.179965157674147, 0.8852710544836513), Array(0.6028613611679305, -0.5204444637347634), Array(8.1765179439335, 7.524236761064432), Array(9.22067756763018, 10.376335319735905), Array(7.723522957148718, 8.062082196051131), Array(1.856967660450704, 2.217602845955126), Array(9.273184339633643, 10.428446485058469), Array(1.3568034155421187, -0.37208463783765255), Array(9.20252094814948, 9.05585324402189), Array(1.97866762866623, 0.1983996019538613), Array(8.119473545109535, 9.261507803118452), Array(9.222244215029367, 10.161001660987313), Array(1.158808886016467, 1.1586355461410474), Array(-0.7325531653862472, 1.4365646042980105), Array(10.566606154730154, 8.307485711703157), Array(0.6952941426879568, 0.3467490795993964), Array(7.935205732794096, 8.985494793330878), Array(10.557100272928764, 11.11003615004331), Array(-0.5901695362261499, 1.8354012509645745), Array(9.611391589236948, 8.988930539216064), Array(7.240291892361143, 9.99693745233431), Array(7.865793839217364, 9.109790488689026), Array(8.651714087731412, 7.2764469848130435), Array(8.361448139386752, 6.552855302040019), Array(8.102433273025058, 10.633378022993945), Array(10.124078985617135, 8.947840619839884), Array(0.6577813947768852, -0.05646673804685354), Array(1.7423659987053663, 1.6224584647307103), Array(11.271521264579931, 7.872724609273357), Array(1.0220908967339868, -1.2927262422017103), Array(8.036238469095107, 8.704313967545353), Array(8.888496167248864, 11.204920361735546), Array(10.046458804748662, 9.04941205515822), Array(9.135056852697291, 6.145599066532695), Array(0.39748471005393304, 1.8215229047209758), Array(-0.2948483764139247, 0.9462840156026328), Array(1.7716704627822701, 0.343857375181464), Array(8.968886407376823, 8.30350353968063), Array(-1.144337397229548, -0.006755371477373373), Array(0.2550028919806805, 2.007381394246968), Array(8.97524513203512, 7.826830280172697), Array(10.465543058272903, 8.72356056047246), Array(7.646383225498064, 9.442188184350597), Array(8.71972749613586, 8.89864621125576), Array(9.552014265273932, 8.871966673134562), Array(8.445486171164497, 9.396903076167133), Array(8.331489884191717, 8.168760327861948), Array(1.717186757874181, 0.8372290518306982), Array(9.169623063851985, 9.021796706449233), Array(9.49109842254096, 9.159205211753774), Array(9.404532383084431, 8.913865448855889), Array(1.2574581230604323, 2.152305904529846), Array(6.727801532213232, 7.137011747596208), Array(1.7369394392347157, 1.048745523976695), Array(2.480736818252629, 2.4724208528797122), Array(2.335921643883635, 2.629086545366051), Array(10.43110158569197, 7.848607290176185), Array(3.160391580655268, -0.24760087558165766), Array(3.079088519509007, 0.7944562796220369), Array(9.140669041465369, 9.272854670373116), Array(0.9789353493993115, 0.7371052816588273), Array(1.7437222374097638, 1.3961215859579474), Array(10.117401690246451, 9.037336445623021), Array(2.4034466613509995, 1.6130498882149844), Array(1.7436536808107734, 1.1328086498856584), Array(10.364522982075256, 9.397806537741998), Array(-0.09347494372402365, -0.9395853215455034), Array(2.406245699813174, 3.89389086301249), Array(9.345910398432663, 9.181303161888252), Array(-0.18422655903294527, 0.22071810468972541), Array(8.632381326419631, 9.37074207121271), Array(7.883487109893896, 10.341932497288346), Array(9.51061063351804, 9.32919528022948), Array(7.053731556651355, 8.070437907441994), Array(-0.07220289219387088, 1.6205692922692119), Array(1.1517773616722036, 1.2198583826314082), Array(1.1108469098485154, 0.41904060274478605), Array(7.8414598518631715, 9.539760841257323), Array(9.551124008568433, 12.004574107171472), Array(8.52580204483252, 10.042593982600422), Array(1.4625528293463714, -0.3962011934454994), Array(0.8382162581007931, -0.3641806652798476), Array(8.865264971403938, 9.29001955518229), Array(1.824047128262949, 1.5715092443068788), Array(10.59861965495733, 10.744155261237085), Array(1.6238959235604364, 0.7672593793706858), Array(1.051618635798358, 0.6484502775116413), Array(-0.01960274830150266, 0.8946844835072099), Array(2.8947038358185724, 1.1660194884713078), Array(9.763411277972978, 8.665293294019943), Array(1.8786208953131682, 1.6789553433871485), Array(8.80133111789999, 7.035854112348401), Array(1.2408586902093703, 0.37140231261561474), Array(10.5118870117128, 8.849049657131207), Array(1.7547720999543888, 1.2501693353177563), Array(0.7154811624245105, 1.3922378559922466), Array(0.7386792308203318, 1.3510831717754515), Array(1.2580087645798708, 0.9321130660168584), Array(0.6589979275916715, 0.6352992902283837), Array(7.952046907967382, 8.933362350399449), Array(8.683294869986382, 9.218582134842856), Array(2.06437941611884, 0.9536613583197927), Array(2.31882017897102, 0.7660046172034822), Array(-0.1969399496897457, 0.6244265508726469), Array(2.371097232246715, 0.7423733186342198), Array(0.667198729595008, -0.625392426611892), Array(0.5547688032891778, 0.2909055972184389), Array(0.6277533268186741, 1.4001847276469925), Array(1.4238835407814945, 2.014002196279477), Array(-1.1515312416329122, 1.219324507884577), Array(7.10940130803233, 8.324882345001404), Array(0.6938789365664277, 1.8002237647141568), Array(11.84467940365777, 8.881668976208328), Array(10.800916614850212, 8.226687184176376), Array(0.5026494003232069, 2.2835619809847683), Array(8.990158357938148, 9.516572409809351), Array(9.039801103079796, 8.361786068932442), Array(0.6974914679316084, 1.038091641794603), Array(1.042379890199678, 0.01984897893608728), Array(8.380713259908754, 10.114470847506693), Array(7.887240282076322, 8.817217333144777), Array(9.459562887736078, 7.290120290908636), Array(8.27511230627354, 9.409264755638986), Array(1.335834538894286, 1.8651769399650957), Array(8.419251231393034, 8.74609699337701), Array(9.724154953389066, 8.662804744439626), Array(0.5031529967316823, 0.9902909425663166), Array(7.414516856933027, 8.169043352596326), Array(10.481867521605386, 9.071147782515006), Array(9.957533095002654, 8.388200915535496), Array(9.806506755291107, 9.861354130157958), Array(11.244483500100205, 9.264690837562425), Array(2.215336675349615, 0.6354460787979188), Array(10.141766574145317, 9.11424937179223), Array(1.6314418695439694, 1.145909967701909), Array(9.670091117254143, 8.822002608902478), Array(9.214882444695288, 8.659798146247095), Array(0.49058576306091206, 1.7448707533812633), Array(-0.09021948030887472, 1.3176278612687846), Array(10.913536373957427, 8.921836738319538), Array(0.7573948225123637, 0.03568337527267118), Array(2.0187588746345106, 0.4998971874970711), Array(0.23728719646538554, 1.453837196431267), Array(0.8547278008031334, 1.0434307563964276), Array(1.5528635543592808, 1.0170533703587354), Array(9.735340054273271, 8.235862104257837), Array(0.5488705180901079, -1.1745543824375613), Array(9.421660291870335, 9.813593431533713), Array(0.45748564659970703, 1.6210208540484614), Array(-0.9774533228844109, 2.3277250477608633), Array(0.7861276590508667, 1.8914929416492026), Array(1.3716589981235146, 1.4281112247925476), Array(8.961463438066207, 9.803017646190945), Array(0.5895743857495163, 1.1099711225273179), Array(10.351307483763481, 9.75114234244036), Array(9.047720202764696, 8.806877808314512), Array(1.181582114845517, -0.2801544913753182), Array(8.672475054876124, 9.413786779417231), Array(1.2044722119997142, 2.142648206412362), Array(8.025696240259423, 7.7372620779223205), Array(-0.05736412037124494, 0.32310439046217565), Array(2.293679668878907, -0.4170877097827057), Array(2.5263834836374333, 2.276704037325246), Array(0.423578658364437, 0.6608044166720342), Array(1.880165825057357, 1.614194578167866), Array(8.546173726048771, 7.627117476435153), Array(9.861653593583434, 7.914086613066382), Array(8.98232667740643, 7.985474986334622), Array(7.128195566136686, 9.52764594390758), Array(1.1075285958739354, 1.3564928343458282), Array(0.85661697021133, -1.132179721825239), Array(1.699490571798437, 0.7107890938859494), Array(1.3938362012286525, 0.9903453525616212), Array(0.508933106292616, 0.5402352724851587), Array(8.268718145608863, 7.735470363610082), Array(7.92254856896261, 10.12949099986333), Array(8.80479541060747, 9.687702729327738), Array(2.1917781269402434, 0.053398601450544536), Array(2.1997346799034156, 0.5900906530120571), Array(8.475902832839466, 8.828357619467514), Array(8.274061167101735, 10.172070539519067), Array(0.11294049787191307, 0.5930216838066042), Array(0.5308153472734253, 2.1520665563168127), Array(0.7399354933636584, 1.0544458316845045), Array(2.1113436138486263, 0.7693017068323617), Array(0.868332356332683, 1.185407594808425), Array(11.004020825897236, 9.847674133427548), Array(1.2193606532537087, 1.7913671741060155), Array(2.2600168402202634, 0.5470749341287158), Array(1.565912123852615, 0.7408565367532708), Array(8.075188645358157, 9.51776986476134), Array(9.586099851605146, 8.642932933124424), Array(1.5681062171605444, -0.06836055735046975), Array(0.4763118354539424, 0.40387725547670894), Array(-0.10373823617523614, 1.4178702680979234), Array(9.936085108425464, 7.940129005379546), Array(-0.40763713274834545, 0.5638813313456553), Array(10.341492062898826, 8.836871214898466), Array(-1.0700699083326959, 1.5085817556496566), Array(10.632768549910658, 7.175007811235448), Array(10.120319917311056, 8.898961327016467), Array(8.454837749838648, 7.555790470452839), Array(3.2901755578870655, 1.619150035980832), Array(0.4586326313670981, 1.2354790561943092), Array(8.03853903059532, 8.877001602021359), Array(9.72408292066309, 9.798699039596334), Array(6.7570655845353125, 7.679705162658994), Array(1.2567900116430046, 0.6369985453263289), Array(8.181807964768497, 8.854813059749123), Array(10.652042079052919, 9.606705764822019), Array(8.991533441037642, 10.250969190174917), Array(7.76484384751644, 6.202690613724054), Array(7.998510798680608, 11.570590228314364), Array(0.2804213385334392, 0.9780066135341291), Array(0.11928060194312284, 1.950482637240971), Array(2.1350559128659388, 1.174214915621788), Array(10.251132598238694, 10.418584519107313), Array(1.2954317827476975, 2.9487262620504997), Array(1.5741182520019423, 0.9899745280955647), Array(8.489285129375412, 9.400138355783703), Array(0.4292668093667401, 1.3499105997028598), Array(0.6084428906172337, 0.3628214568080571), Array(8.930915704020638, 8.42502572481469), Array(1.179046196547465, 1.9084064027495904), Array(10.726131309134349, 9.643764761985016), Array(9.409456891139275, 9.811036406515235), Array(0.6165196633157998, 1.6622357497154), Array(2.54948608378825, 0.26686675898352596), Array(1.4803561923583213, 2.575313975336826), Array(-0.23518609736863816, -0.2102355583217168), Array(7.927751572088379, 9.417706062392098), Array(2.3935075430184574, -0.5387463992559163), Array(2.5391086828498204, 1.0776505753047807), Array(10.216523467760348, 9.723245549374608), Array(9.994953139381682, 8.829975585844544), Array(8.303779813518819, 10.77025159805371), Array(0.6002793456323132, 0.9321861015921358), Array(1.596155980571685, 1.1708775020871354), Array(2.306315211888695, 1.0152715449099456), Array(10.232915261749248, 8.97380474017152), Array(8.158582248016838, 7.437278007708915), Array(8.800410835140905, 9.033774494149398), Array(8.015665638374669, 7.102046059668878), Array(7.023566000151777, 7.828176406353808), Array(1.242889021186398, -0.6222858649406258), Array(0.3789744205796678, -0.5906333254303389), Array(8.908897599017259, 9.239204710271501), Array(9.032279389560456, 7.874427054767128), Array(-1.3822346171050377, -0.9735724577994871), Array(9.800953466113928, 8.9200210623224), Array(9.435111081907744, 8.544044979055146), Array(0.10815723749062078, 2.431855774934869), Array(2.67099972060119, 1.2291298627331002), Array(8.340184600668287, 9.053840020219925), Array(1.9814456373338194, 0.46063223062176994), Array(2.4921218960801808, 0.7665665843019415), Array(2.12639244650384, 2.311275086470754), Array(9.094657355458128, 10.496410026037001), Array(10.648326822090247, 9.434914147560361), Array(9.008881100584883, 9.551154208886679), Array(9.13770480515043, 9.126923475473152), Array(0.8093865767506923, 1.7806377071256023), Array(1.5611593098143732, -0.27863825381314866), Array(9.31218218139201, 8.214006855892888), Array(2.11728120023923, 1.2648668662923506), Array(2.160806303702576, 2.2989870302032207), Array(0.4875471560215142, 1.2964249613193817), Array(8.605496803686544, 7.102710269619983), Array(9.971657951085826, 10.567679848646751), Array(0.6427721901279382, 1.133808490482991), Array(8.994181947605126, 9.016790030179125), Array(-0.4076230619825243, 2.0269582606308933), Array(8.850802111260888, 9.036119858544156), Array(7.487554225908604, 9.140393913688149), Array(8.904950239094054, 8.43233836439657), Array(8.34399542703559, 8.43765973001229), Array(8.696369503922599, 9.58201387024924), Array(9.310546480385776, 8.601404663718197), Array(7.162442007935431, 7.4243904744456355), Array(10.0073648708125, 9.259737835311073), Array(9.477268819009783, 7.699416930687945), Array(0.8086821886250686, 0.789850136866258), Array(1.020889309446595, 1.402412583520165), Array(1.1453073403354306, 2.6547585374487035), Array(9.949176669651388, 8.784977827475396), Array(10.368900168130985, 8.361778472365616), Array(10.679708576683396, 8.773358300086832), Array(0.799951360345315, 2.053741352435741), Array(7.818128468986517, 8.413961104699414), Array(11.692038772636426, 9.119781110760938), Array(9.69044013329604, 8.361333416012783), Array(10.747723814926696, 10.3175216237791), Array(8.467949335705933, 11.537448702542546), Array(1.3290917769339592, -0.6850373105462428), Array(10.053072806272814, 9.177116005681572), Array(0.05140131674095161, -0.9319744453952141), Array(9.907020367091421, 8.520371836758468), Array(-0.06613390504250671, -0.043281017260752286), Array(1.1862422524618403, 2.788667232791464), Array(1.4730212636328068, 2.2564229069283708), Array(3.3088404701024783, 1.3562196927888812), Array(0.4051514367202076, 1.2724316836821032), Array(0.91939116675877, -0.20516604368460833), Array(1.420486813053282, 0.5776700488814386), Array(0.10905260642092973, 1.3178687785854182), Array(3.8495760814778746, 0.4546979051239747), Array(9.024274114150302, 8.827404212815557), Array(9.674961467627602, 11.397369344832102), Array(-0.41497296553752006, 0.283725071402806), Array(0.5431134273187473, 1.472404131957906), Array(1.8688097601285987, 0.7677396069324739), Array(8.750235466818635, 7.562814456790841), Array(7.383265241637668, 8.49560789606416), Array(0.6494839080786925, 1.0974847534450693), Array(1.3278868915678452, 2.2634926443718317), Array(9.883674351422092, 8.504088472417445), Array(8.97060092280826, 9.611700864105352), Array(1.4957855250762462, 2.7054588093769687), Array(7.670795881625132, 8.357808083705475), Array(2.5375472364859295, 1.1916908686094676), Array(1.4812905502401486, 1.8401202391533915), Array(8.328089265571123, 10.085761269421887), Array(0.864471948529083, 1.263856340044843), Array(10.063519253870144, 10.132894397361941), Array(9.546420399739038, 10.086107717699003), Array(8.854472456563553, 9.332523866941477), Array(1.6718072823321355, 1.5387777949526917), Array(10.959322708844496, 7.299089721967727), Array(-0.30041372153358026, 0.8674978482299751), Array(9.75835480197426, 9.144350160258977), Array(8.562005181516518, 9.252124048556992), Array(1.004385285276718, 0.0649069230657674), Array(0.5969548385146204, 3.272633526821647), Array(8.34251203227605, 8.726793505230706), Array(0.2124380194717611, 0.04120463959711773), Array(9.827054925553377, 9.765515439995768), Array(2.0484128600179634, 1.7182916031709978), Array(1.2354598069169818, -0.12004813728105734), Array(7.670404531624717, 6.682143202339235), Array(2.7530467956819393, 1.425708491661011), Array(8.412812179044817, 10.396273919474377), Array(9.826590003179774, 8.780736689959005), Array(0.12595079322297575, 2.0468387479558077), Array(-0.10324529453334286, 0.9716918496029092), Array(8.564472710882846, 8.29758193481222), Array(10.443491443866762, 8.714846547085669), Array(1.3167001400959153, 0.5739977605440297), Array(0.927766034078036, 2.239497543308161), Array(-0.8670080857071853, 1.8827942230865082), Array(7.410891115617791, 8.387120711639414), Array(1.5422652162783246, 1.5117451729928983), Array(8.539583166891122, 6.941581129006371), Array(7.154247979563566, 10.074231387561492), Array(0.8461125831565053, -0.8913435190738281), Array(3.0150971311561494, 1.2666488528698778), Array(9.049671900012724, 8.341505851840493), Array(8.950727490738164, 9.344377941893491), Array(8.582579332019991, 7.568001722653907), Array(2.2892795936550083, 0.9886325102364447), Array(8.732786719406597, 10.824190352850316), Array(8.951770777847079, 9.327216836110557), Array(7.659451979137227, 9.760826979824802), Array(8.266638766591049, 9.203893905515168), Array(7.820473568965616, 10.535919488023293), Array(9.629964151379841, 9.698724486102604), Array(1.6402063835106806, -0.19073897950373198), Array(9.412709991406413, 9.64024147463052), Array(1.4090221314019202, -0.8221201028128899), Array(1.2717233027480854, 1.7829007007199345), Array(1.905291260419009, 0.9388610456536804), Array(1.678263270479805, 1.3971825801597964), Array(9.107700821806741, 11.05032055824714), Array(9.017220170335328, 7.804586499839271), Array(0.19698076640242956, 1.1481106736607536), Array(0.6681009335145589, 2.688048587981177), Array(8.886568563824593, 8.978093071755124), Array(8.203964741134351, 11.014593882860787), Array(0.9374374287628322, 0.7166672382472502), Array(9.855289601518402, 6.726620639341972), Array(7.419653086071576, 9.501037555710285), Array(1.577941063463215, -0.011009130173038395), Array(8.372064947338531, 10.001142388229992), Array(7.986794478173326, 6.705507842968917), Array(2.33622514967164, 0.5681558444982728), Array(6.522424906084288, 9.39328934993516), Array(7.749330413429588, 7.780145147885786), Array(10.988579722103086, 9.638842651238143), Array(9.594184441976122, 9.498154246926367), Array(8.079893991117261, 8.600585082362457), Array(10.003164716739393, 11.636519330481221), Array(8.223232167557349, 10.809830808626785), Array(1.6019137552696698, 1.6001273080684377), Array(7.596390633848012, 7.514930860527552), Array(2.5473156638471655, 1.0225996182837735), Array(8.811979515455672, 8.664760337059517), Array(1.7956998566710927, 2.479272287725446), Array(-0.37037056683854996, 2.0976064192420028), Array(8.799905500223293, 8.76953750142327), Array(11.084731600816617, 9.425468399637591), Array(1.2747554954567022, 1.6893400471438473), Array(9.093666282356473, 7.81008187740681), Array(8.894682461668365, 11.191246966764352), Array(8.07671458065078, 8.343209456087779), Array(0.9177014928841568, 2.6105424635684855), Array(0.9414900614040744, 2.029869897851594), Array(9.124356397193758, 8.63759754626664), Array(9.504900394274769, 9.343553059660271), Array(9.133019415815578, 9.242838268966684), Array(1.310210192589298, 1.5426549887254302), Array(9.279645516432373, 9.312855718598465), Array(1.4338958824360393, 1.9596235664779915), Array(8.171280389722794, 8.544279912340729), Array(10.050164711453645, 10.583444246826554), Array(8.096821868331945, 8.210517841741092), Array(9.901187445563147, 9.346085494982006), Array(8.762291652256117, 10.530384239599787), Array(1.365862923798959, 0.43616638261537866), Array(0.6983160592585078, 0.8744066312046963), Array(2.3591714658418343, 2.021178161700724), Array(9.004037445985226, 8.773739659940778), Array(7.531162698943495, 8.910516936150879), Array(2.392202282317336, 0.9627575197281526), Array(0.677290835314747, 1.9940660727986486), Array(9.69044930251052, 9.919108875099385), Array(2.2031267893378583, 0.4659942268105186), Array(-0.03425117265625621, 1.731135712008367), Array(1.3458375797565023, 1.7049256628473872), Array(3.2213109649592333, 1.1083867441487696), Array(2.9194357979556953, 0.4149722198464547), Array(8.95909379651905, 9.534817604722198), Array(8.867041776695494, 8.673998631681918), Array(9.73655181650212, 8.901007968921565), Array(10.154690032609318, 8.984022111892461), Array(2.0178604164097664, -0.08858096587247366), Array(0.720864596337078, 0.713102996874855), Array(8.003224238632914, 9.985639347610707), Array(8.3479101141087, 9.426521604540453), Array(1.987889590276093, 1.9257917643260245), Array(8.830259764035336, 9.245982124488824), Array(0.906759314838697, 1.1664971320230304), Array(0.30100006275577174, 1.3336860654811786), Array(8.688661380120307, 9.928336100439978), Array(1.8949227581893568, -0.3615286256773831), Array(1.0759608374499567, 2.6341007715613047), Array(0.232149212263133, 1.0099675832167294), Array(2.108231817759645, 1.1617467641371624), Array(0.7569287466931941, -0.3049335548899925), Array(0.5422773002775344, 0.9550004070117883), Array(2.095416404236501, 0.5940577037689223), Array(2.3827853253838502, 1.4996169038250706), Array(8.873803657721176, 8.455373130041414), Array(1.1422929387837608, -1.3452846246892256), Array(1.5372253264340427, 1.837255798253111), Array(0.6098806710361294, 1.5793805135285877), Array(9.756667533048853, 8.861584267395308), Array(-0.060862423534840504, -0.16759374026650686), Array(9.284285611491988, 9.586496415257304), Array(1.8485699003468417, -1.4455366756047723), Array(0.8537519507668575, 1.6160666590905537), Array(7.952530029658652, 8.254313445608602), Array(9.163913986394371, 11.381757821295448), Array(7.624633660193917, 8.815121069749075), Array(9.112330655190563, 9.608853432159556), Array(7.808315098315732, 8.208377489799954), Array(0.6319774560808061, 1.6550488287908163), Array(8.911570143847447, 8.993539209965425), Array(7.715035860891291, 11.150256509263132), Array(3.6585927902926154, 2.280078718032377), Array(10.659950763852748, 10.876853797980894), Array(1.4203947987791186, 1.5439839285762877), Array(1.5159476827129965, 1.1055351439434087), Array(0.5831636315552939, 2.356121256625559), Array(0.6187766306442085, 2.076818383734705), Array(1.7648070081056044, 1.0287112527482332), Array(9.623430821270688, 9.135454259199214), Array(1.8082922293246302, 0.8471110542998681), Array(0.9843631193832174, 0.024208369567020882), Array(9.352755130142983, 9.494172183008928), Array(9.780839055400053, 10.280112546901986), Array(1.4691616461273558, 1.3369461245195735), Array(11.037461040752612, 8.647762841667625), Array(2.518318322026304, -0.0901235596682719), Array(9.646582625724912, 9.074705685477447), Array(-0.6135245048101508, 0.18145650338944874), Array(8.44697920580238, 8.348788688517962), Array(7.947359803653942, 9.823371071060473), Array(0.08890570851018809, 2.3244253847290564), Array(10.170295959923989, 8.285084574098505), Array(9.0248591598438, 8.902381765087803), Array(11.347393437659916, 9.20782037093889), Array(8.234081901481105, 9.919482078164528), Array(8.502848450249624, 9.579557001144854), Array(1.318636123027987, 0.39642543076444947), Array(1.3517822142574067, 0.1278820112501836), Array(2.8744586275412587, 2.608244040506416), Array(9.395868201636642, 7.824041795913529), Array(2.408413793744293, 1.2235787706758319), Array(1.5501821956611468, 1.035332736377811), Array(8.897135019181661, 8.045673084634158), Array(8.876809977304035, 8.7711282867283), Array(9.174541121959004, 8.624994705248527), Array(-0.08951934332211642, 1.9098763015771458), Array(-0.26394059418959004, 1.9149274171437771), Array(9.411919841049404, 8.48424667804764), Array(8.340308923112278, 9.532833924155362), Array(9.058085911014153, 8.428906367914228), Array(9.86399983451336, 8.876319945525545), Array(10.721184130941882, 7.276051635895), Array(9.1929918986998, 8.986715524890851), Array(-0.005949062905818758, -0.2974665251854849), Array(1.3648580757428839, 5.003775048148791), Array(10.306958304042132, 7.554122796993082), Array(1.8202633927729739, 0.5701275084153699), Array(0.21494693861162462, 1.987755114893548), Array(-0.9610437239205738, 0.5615332527835755), Array(0.9817863588360359, 1.524192198217391), Array(1.3260488299543782, 2.6950279915989706), Array(0.21623702828982527, 0.7201839201933691), Array(9.86328310914421, 10.821713795568435), Array(8.755366007499381, 7.304998538339972), Array(7.828562106125176, 9.720271780480319), Array(0.23955118788445107, 1.8825191076338479), Array(9.608766861231373, 9.144606345348782), Array(1.0744057757427479, 1.0206024651862329), Array(3.3457861371549034, 1.539503537994824), Array(1.0067663049619298, 1.9845233673539178), Array(10.223060259079405, 8.774506184714484), Array(1.560556928129476, -0.46978866568811717), Array(0.9622930275722278, 0.26661048848620206), Array(1.2550291681154293, 4.812422336076535), Array(9.154013709821424, 8.858089072299592), Array(0.8547291727530141, -0.8565611437314824), Array(7.595012322038297, 9.44783862660197), Array(9.767346727300502, 10.359514490419919), Array(1.7828957349335124, 1.616330803608775), Array(8.497032132302282, 9.316717863275466), Array(0.7571057063228697, 3.1346272486876976), Array(9.119080558618213, 9.714416939375807), Array(-2.0185430399151705, 0.5263977890326342), Array(8.703846695292402, 10.685499167497522), Array(7.417415614343055, 9.841805785398337), Array(9.026011863093316, 8.672731801765693), Array(0.482474986125786, -0.43477712966592374), Array(2.2410455794532815, 1.763971704240749), Array(1.7288785126822694, 1.0739693652722622), Array(10.737889586859964, 8.838926186111863), Array(0.4220764705822819, 0.585355879611069), Array(9.226902932728468, 9.0559828090346), Array(7.9889131121780474, 10.04248563456194), Array(0.6553633667754405, -0.1369111343034617), Array(3.2757958422007856, 0.8594803245693076), Array(10.289499592363239, 9.102421739897887), Array(0.03569605806398324, 1.6821357557680345), Array(1.681064823232192, 1.3173204242144845), Array(8.756750818623035, 9.103365828240685), Array(10.507386750483558, 9.48109574068663), Array(11.67698260118707, 11.520640395619036), Array(2.052911866630855, 1.3688675834145467), Array(-0.3469891280098054, 2.072756080712095), Array(9.400543593596609, 8.946080171817037), Array(0.5924977378497802, 1.5149830308704706), Array(7.680816370136875, 9.056866655708346), Array(9.260216518372653, 8.334346170364702), Array(11.37914947381278, 10.338625775604351), Array(8.032037590910086, 8.5011435926574), Array(-0.46089985793660704, 0.3365284598242886), Array(1.304440341716298, -0.25531679743433955), Array(10.262290867046978, 9.510093895299974), Array(0.3734400071322477, 0.1309073162273262), Array(8.08167424444534, 9.288626394285977), Array(1.745119804277596, 0.7603380962179214), Array(2.264121330751125, 1.0335514284683212), Array(-0.09683004903987924, 1.467567455761401), Array(8.883411990998296, 10.512569781065954), Array(9.037117924828884, 7.726976184441462), Array(1.4960573292205466, 0.23626319263047246), Array(1.4293734027253369, 1.8515779564852006), Array(0.15235281284940771, -0.7678072909608185), Array(-0.22609570728791573, 1.7745291554379377), Array(1.216726653587316, 0.08455398952495807), Array(9.686280613500479, 10.771718566751732), Array(7.710625157602171, 9.05715307796367), Array(0.9505565607360085, 0.7109057475424345), Array(1.8915685639605888, 0.36877511080231995), Array(1.2622310917802744, 3.2931226237548668), Array(8.501497839338978, 8.585411952718687), Array(8.289768179292677, 9.171612605034941), Array(1.2487429719591963, 1.6977802195120617), Array(8.699609767137815, 10.030413328065723), Array(10.816468293060208, 8.621655586205986), Array(7.915333900839308, 8.529425187240616), Array(9.732992173430818, 9.187452765174047), Array(9.444483149343101, 11.032858192787067), Array(3.050728876493132, 2.3842995548196466), Array(0.40637636860305504, 0.6738164939343813), Array(8.877388407572099, 10.048494595031128), Array(0.3669195975586875, 0.8349760217390496), Array(1.6102595140722622, 0.7859882630194821), Array(9.35208691243865, 8.940919616471643), Array(2.4856064501423605, 1.0459867301807224), Array(8.888882349068803, 8.362601534478303), Array(1.2323583230464414, 0.5567823490508259), Array(10.12939310385575, 8.36344064269848), Array(8.5420998987927, 11.437465629392912), Array(1.6436196868795718, 2.3013011268956425), Array(1.1324639098657356, -0.43585730170330605), Array(2.0575223291312574, -0.2630056757940882), Array(7.495366121708543, 9.018729684999279), Array(-0.3377625901215826, 1.3154325714270518), Array(7.828148878895343, 9.822158656899267), Array(-0.41223109401347835, 2.118507390368138), Array(0.5305169943025778, 0.45922156442654694), Array(1.4036200615553815, 1.1516972759689816), Array(-0.032664128073478294, -0.6394508557167877), Array(1.8963929509609123, -0.03858222566137992), Array(2.9417361527524446, 0.6187184570663141), Array(8.241022917796968, 9.313289128665343), Array(1.7684047119684796, 0.27143413113916703), Array(-1.0493268387163868, 1.7671726466084958), Array(8.637062952489027, 8.626482146488762), Array(0.8157410326361318, 0.5594233188791353), Array(-0.14760181422813412, 0.3224859043729661), Array(8.381107617208496, 7.748774182048074), Array(10.842275763622334, 10.643307839891222), Array(8.914093417133618, 10.146578806865536), Array(9.98231997727629, 10.016473049349255), Array(1.042200605606341, 2.2611883480315624), Array(0.21748921308384828, 1.6490270491322883), Array(0.565576004871605, 1.399942761466628), Array(1.0849926931595082, 2.385403008383916), Array(1.760128160587151, 3.0080777418107005), Array(8.472824516140511, 9.375473206683887), Array(1.270891846403796, 1.3977138932573534), Array(2.2027505589141025, 0.2735722063263327), Array(8.057240660027995, 8.833115251112572), Array(0.33842609005515445, 2.0617157933315706), Array(1.0067645213488967, 1.7599816453274086), Array(8.885566662347156, 9.68254181116732), Array(8.867124931218523, 9.323345085136845), Array(2.5168829232057695, 1.4621022776389716), Array(0.5215971964160133, -1.1005248042831979), Array(-0.17136385068334414, 1.2700543751888909), Array(10.457205357036116, 9.961410024103785), Array(-0.7604081416773143, 1.7707782490745219), Array(1.907039449985625, 0.6985183499479739), Array(9.243620728368432, 7.603665162266933), Array(9.306296643638253, 8.66402880966022), Array(7.992409761971851, 7.901546818941553), Array(9.31003961231907, 9.379601812449064), Array(10.324610882467192, 8.577593766137547), Array(-0.15340067354598252, -0.7272569605383601), Array(7.190866151070121, 7.426254195616672), Array(7.491351411294182, 9.580942076873619), Array(1.083785103854193, 0.09936080240974943), Array(7.75001334468908, 8.967342131071208), Array(2.7388083796186633, 1.7670623583123484), Array(0.8074978257539775, 1.2311269142460814), Array(0.3750970124778872, 1.329023161734352), Array(8.888030508687761, 9.721862625134936), Array(10.463276731155217, 9.057480467146778), Array(9.819959991078926, 9.985827797004994), Array(0.34763520562087313, 1.7207689969436335), Array(0.35087085178095867, -0.19242769051937358), Array(8.787845725225498, 8.427440404542615), Array(9.99619937319444, 7.659697687327432), Array(6.953417089442389, 8.297502043840417), Array(1.3016891796928352, -1.09925908312968), Array(11.426429883601124, 6.4384688019059135), Array(10.465111341566374, 8.121939482503956), Array(0.7097679092768588, 1.6894505694296331), Array(1.2959332900215434, 2.0125695621282658), Array(1.6148517464897825, 1.953846306636494), Array(8.883463753914924, 9.124187259703584), Array(1.9714922960538037, 1.5595281195160746), Array(2.6808069889226394, 1.0605418847838481), Array(0.8379453176182727, 2.251315133374045), Array(8.545052702709128, 9.688163373037229), Array(0.3316736610429235, 0.8578934731847879), Array(1.8182685336869113, 1.35851078777576), Array(-0.027966682844985158, -0.8432021256763609), Array(-0.0747371530688874, 0.45946789556542444), Array(1.9913164619732027, 1.186878381137123), Array(2.6229352192196487, 0.5284813801068646), Array(10.056503115974069, 8.747885108004551), Array(0.8463049907999792, 0.4659230685970732), Array(10.28721746853342, 6.35126116271568), Array(0.8796277699586281, 0.010307882034512272), Array(7.692624149996895, 7.9511838092527105), Array(7.548245655492688, 8.857218119198732), Array(1.2210211148340147, -0.3058524102931437), Array(-0.3837905985846499, 1.9423893650901802), Array(0.9634836301241996, -0.25533005723513136), Array(2.3572009892436063, 0.6300418353982296), Array(7.635774000588722, 8.22499640502584), Array(9.180980689683054, 9.330444735473588), Array(9.02961669900421, 8.384762653943366), Array(0.8600781144010885, 1.0438616031908983), Array(2.118576803137919, 1.5459582699177261), Array(0.33060117295393243, 0.9428889714063893), Array(8.911276785021576, 10.136394811422088), Array(10.408355342723732, 10.408640463075619), Array(0.8511599350578728, 0.48364568883914727), Array(0.6665312709731896, 1.979695617594492), Array(1.3853038835264342, 0.8967439850422415), Array(0.6932523016960188, 0.3705933015254952), Array(9.226999028409287, 9.678144577448084), Array(10.139148843141887, 9.695504005261867), Array(8.996821936093362, 9.456906945064416), Array(9.496741650207607, 8.576001709410457), Array(10.884734899834148, 9.74145941951189), Array(1.1420791335812455, 3.175798856692156), Array(7.819410158189179, 10.655848324114286), Array(9.475170364787918, 7.790073014295008), Array(8.242075843828614, 8.20312477414943), Array(9.007442000269695, 8.942232203109713), Array(2.0033844870480437, 2.448858820129809), Array(1.9971506574780422, 0.4435508991569145), Array(8.692702519978416, 8.258056030381757), Array(7.501338138436268, 10.1413189894962), Array(2.4236550283788505, 1.9412024365970766), Array(0.8915749400367121, 2.1794026362294936), Array(0.5443674699379608, 2.1914235599773475), Array(10.44969269086508, 8.383052105043145), Array(0.7197656515421471, -0.2861000487532346), Array(-0.02326954044531604, 1.8909447010103757), Array(9.389820262583262, 9.579450091851008), Array(9.335519798512342, 9.206975838208173), Array(8.650390221654767, 9.640397317193614), Array(8.92347575948385, 7.112687935907345), Array(10.018023257567567, 11.217663749916198), Array(8.561309505268945, 8.70855091293535), Array(0.34821468199479133, 1.2011892754609155), Array(1.5835295887346268, 0.946682268958067), Array(-0.06655518335844901, 1.4707638351677192), Array(0.8548479467658846, 1.8792349400090922), Array(1.0240106591754436, -0.1022940269115491), Array(7.920156362556678, 9.358367416252644), Array(0.8752358133828565, -1.0510173594081875), Array(9.929583204143354, 9.592224308821457), Array(7.916939696655535, 9.766511333524992), Array(9.706239556517561, 7.3105078297547195), Array(9.320872635409616, 9.166632695643013), Array(1.5882638772622917, 1.3033906667186486), Array(9.297855649725953, 8.806134676633496), Array(8.571705213116045, 9.327158597949873), Array(2.396207192735564, 1.4833321537631587), Array(-0.7448124036424308, 0.7357763559700587), Array(0.13487772568754697, 1.3119897920572954), Array(8.978086956561443, 8.960883700571527), Array(9.01024130307258, 8.903498884995225), Array(0.5628414969742237, 1.004555789693668), Array(7.725554004257138, 8.350014769644405), Array(8.938432608221941, 9.46385848007624), Array(7.421320184719365, 8.321848676844672), Array(7.633890510036021, 8.675942255156261), Array(0.41465432452587636, 3.4477239482371633), Array(0.8942600137036361, 1.3118659156027321), Array(8.682464899587202, 10.315318858782703), Array(0.7635502363870148, 0.27801193616249587), Array(5.665177268160399, 9.053086941310726), Array(8.518028548912879, 9.190066113520817), Array(9.670658327779835, 7.9456903144386795), Array(1.8036953019731543, 2.4060333247986665), Array(10.068309666800717, 10.254327753397083), Array(-0.45387350723135533, 0.09769369861810417), Array(1.2970075637792635, 0.22869881988693175), Array(1.3137371811230074, 1.1661026264753287), Array(-0.7294176439837727, 1.1739268510337486), Array(9.434811886977124, 9.085523840231245), Array(1.1910976094207486, -0.0391752005392314), Array(0.527876315934142, 2.1543967977550755), Array(0.5651670907227967, 0.6043361299970018), Array(9.373482532792732, 8.008239890130719), Array(8.358725733385391, 7.886318803897078), Array(8.392910718977475, 8.76938566450027), Array(9.177622049016497, 9.703838234616992), Array(9.771437592349136, 9.249902309273288), Array(8.530505774404492, 9.671164128727495), Array(8.823264710859208, 11.124372856027867), Array(0.9033493066796705, -0.23949273415390726), Array(8.48025732247259, 9.144545173893956), Array(1.4886171481678971, 2.1306917570994335), Array(0.3530432195558285, 1.4756264309265732), Array(3.2319796337058637, 0.6974194841161421), Array(9.362964573500314, 8.055234122025956), Array(7.399713299808997, 10.275677309382525), Array(9.630193505616662, 10.525921210901272), Array(0.5790356013340532, 0.16535648749050647), Array(9.534158928681597, 8.887663729195454), Array(0.7093190064582673, 0.3301456384349605), Array(8.645877013153074, 9.75793008982006), Array(2.102084649572536, 1.0365485891395516), Array(10.73415774803694, 8.474825945772208), Array(1.2957228980841289, 1.3303839232105301), Array(11.09363621794474, 9.373283358551173), Array(-0.44662210830205384, 1.6568291677617808), Array(-0.13011515826812503, 0.4937336253554966), Array(0.3318064999504976, 3.309236597847032), Array(1.678203235738434, 2.502621097630458), Array(-0.553275401807847, 0.4585587749362575), Array(2.5567551592474547, 1.5086265799970926), Array(10.013198268209438, 10.550963807791561), Array(8.860010370017715, 9.201095624490844), Array(1.391838025361122, 1.4052422660754045), Array(10.118167495941604, 9.586410821941273), Array(0.898699020468341, 1.7603810784349243), Array(9.486828301557578, 7.808941790398581), Array(8.619422493377979, 8.86853038304596), Array(0.005505401220772588, 1.6305083334626658), Array(7.7899478144765135, 11.848485715484678), Array(1.0794199609640873, 2.6133697672729848), Array(8.226493278318717, 8.007088686044954), Array(8.477417072401312, 9.149200217040502), Array(1.227243393588736, 3.444006060123132), Array(8.963775612955226, 6.851306291833692), Array(10.106186000341866, 9.363700423734356), Array(8.180502295235671, 9.802555623364707), Array(1.3272238187406122, 0.5027086745035111), Array(-0.8201462163543678, -0.013663931927217154), Array(0.7207669640844587, 2.2508927806961303), Array(9.217092787125413, 10.960075038180022), Array(1.7789410697944374, 0.35054185206497646), Array(2.3010781499523247, 1.2362758973244468), Array(7.766246523160261, 8.870805080021857), Array(0.30643285602321924, 1.3491765939649234), Array(9.508404804454424, 9.596834817841833), Array(9.835214733489563, 8.193965490676398), Array(8.671997516097358, 9.145290498153752), Array(0.44541182675549584, 1.433760197394632), Array(1.4391476212580177, 1.0828031256424546), Array(10.35619116528321, 9.9039868841372), Array(7.678264171905771, 9.35787735202094), Array(1.9648071775616478, 0.72124018745064), Array(0.3623455729430367, 1.270111876031086), Array(0.6295620049794541, -0.7558309926235307), Array(7.917464870454042, 9.93930005775469), Array(9.352799323920284, 10.618706258492404), Array(8.750494822847138, 9.763390420843253), Array(7.886980090268727, 9.795926123472004), Array(9.173707634132466, 8.87097961187682), Array(0.3236785379277666, 2.2639007796027775), Array(1.796344673071332, 0.6901548478792672), Array(8.411490771638737, 9.390391577409423), Array(0.7011066413962292, 0.7754498658426732), Array(9.857091183025462, 10.475649012030896), Array(9.141045460114615, 9.67925666857993), Array(1.6339664223423833, 0.05079526001360479), Array(0.10384819123983524, 0.2705391171517113), Array(8.28278771972648, 8.490433723135634), Array(0.8613786635024065, 1.8679868407006066), Array(9.216701825068062, 10.423971083922968), Array(10.413254190300039, 8.385773088089499), Array(8.668004992906653, 8.28868269963031), Array(8.090859076385321, 7.655342013931508), Array(10.225243198829421, 9.354330224474685), Array(7.930021994651881, 8.484323380220154), Array(8.061304207473652, 9.841479680615988), Array(8.922730411503363, 10.447933551090888), Array(2.7852196141603525, 1.6230454873827926), Array(7.533652303148998, 10.522962468779667), Array(9.739991679790124, 7.639903274791333), Array(1.600331588977285, -0.5965278639703184), Array(1.329130077663161, 1.3412534897202033), Array(2.445492176552661, 0.9486899970524577), Array(10.319658989162134, 7.866817897066189), Array(8.30965297525161, 8.825639399799632), Array(8.620728428496506, 10.042155469549432), Array(1.0494228700575217, 1.9109262573505426), Array(7.1253832842244, 9.961820812547218), Array(0.015939825717108946, 0.2761405984541625), Array(1.7804101640960324, 2.226706072851793), Array(0.6708688452427318, 0.3945730600487425), Array(0.6837902497634158, -1.711122523312464), Array(-0.35790746746095525, 0.4623664626646654), Array(9.604252431255112, 8.936137064302763), Array(-0.0813414270367887, 2.1340076017159095), Array(2.241079271687763, 1.7052404956606584), Array(10.19547428090293, 9.376431459533107), Array(9.348521716164491, 9.356502956507782), Array(1.7392319214858591, 1.6437555963099721), Array(10.024459753660604, 8.528864282433867), Array(1.0794282319674668, -0.537247523508062), Array(1.7660902538211978, 0.08998146509512528), Array(7.154875377568603, 10.141603469273882), Array(1.763980098086889, 1.0763049307273358), Array(-0.38793383863325115, 1.4901651108550553), Array(8.165205851124067, 9.984771921562569), Array(0.03945055763499894, 0.9428375918300596), Array(-0.3763508617563647, 2.5484509002652946), Array(8.250336575158233, 10.204300004138974), Array(1.4452752980037162, -0.9011143667521178), Array(0.8830876933912409, 1.9011698295326767), Array(1.0039904835756104, 1.9378104778874452), Array(9.594024167027671, 8.648020262994553), Array(8.493022969887255, 8.422110941033928), Array(0.29435574468703596, 1.4867878456913715), Array(8.560072237767855, 8.913373341622862), Array(0.6196373350729243, 1.9392717599149205), Array(8.05870456795703, 9.000673981172747), Array(10.02804767040634, 8.45808634381062), Array(2.7079019039492955, 0.9202438625673361), Array(1.0724920870572392, 0.13088493800115997), Array(0.5428713366940418, 1.4201212285858822), Array(2.444425829602507, 0.5236054413599087), Array(7.538714365644546, 10.56855150070428), Array(0.4454243975947556, 1.3585795839204), Array(1.3596988003489452, 1.007889406014176), Array(8.34592608157427, 8.328181387021072), Array(1.7360581590385658, 0.530223511536495), Array(8.133035215829553, 8.657416630684855), Array(9.185310141368644, 10.08962926867114), Array(9.121953995966008, 7.771419547498616), Array(8.033686288650042, 10.069525677161057), Array(9.6149533996305, 8.656455431231654), Array(8.48427266344093, 8.806984104617253))
  val rng = new Random(42)

  val g1 = new MultivariateNormalDistribution(Array(4.0, 4.0), Array(Array(0.1, -0.01), Array(-0.01, 0.8)))
  val g2 = new MultivariateNormalDistribution(Array(6.0, 6.0), Array(Array(0.2, 0.1), Array(0.1, 0.2)))

  val mixture = new MixtureMultivariateNormalDistribution(
    List(
      new Pair(java.lang.Double.valueOf(0.10), g1),
      new Pair(java.lang.Double.valueOf(0.90), g2)).asJava
  )
//  val data = (0 to 100000).map(_=>mixture.sample).toArray
//  val dataWeights = data.map(_=>1.0)
  val gw1 = new NormalDistribution(1.0, 0.2)
//  val gw2 = new NormalDistribution(0.4, 0.1)

  @tailrec
  def samplePositive(dist: NormalDistribution): Double = {
    val s = dist.sample()
    if (s > 0) s else samplePositive(dist)
  }
  val (data, dataWeights) = (0 until 10000).map(_=> if (rng.nextDouble() < 0.8) (g1.sample(), 1.0) else (g2.sample(), 1.0)).toArray.unzip
//  val (data, dataWeights) = (0 until 100000).map(_=> if (rng.nextDouble() < 0.8) (g1.sample(), samplePositive(gw1)) else (g2.sample(), samplePositive(gw1))).toArray.unzip
//  val (data, dataWeights) = (0 until 100000).map(_=> (g1.sample(), 1.0)).toArray.unzip
  val (gmm, logLikelihoodTrace) =
    WDFEMGMM.initializeAndFit(
      iterations = 10,
      tolerance = 0.0000001,
      x = data,
      dataWeights = Some(dataWeights),
      minClusterSize = 10,
      random = rng).get

  println("finished")
  println(s"Means=\n${toString2dArray(gmm.means)}")
  println(s"Weights=\n${gmm.weights.map(_.toString).mkString(",")}")
  println(s"Covariances=\n${toString3dArray(gmm.covariances)}")
  println(s"logLikelihood=\n$logLikelihoodTrace")

  // exports
  File("/tmp/points.csv").write(data.map(x => "0, "+ x.mkString(", ")+", 1").mkString("\n"))
  File("/tmp/means.csv").write("0, "+ gmm.means.map(x => x.mkString(", ")).mkString(", ") + "\n")
  File("/tmp/weights.csv").write("0, "+ gmm.weights.mkString(", ") + "\n")
  File("/tmp/covariances.csv").write("0, "+ gmm.covariances.map(x => x.map(_.mkString(", ")).mkString(",")).mkString(", ") + "\n")

//  gmm.means.indices.map { k =>
//    val mnd = new MultivariateNormalDistribution(gmm.means(k), gmm.covariances(k))
//    val grid = Array.tabulate(100){x=> Array.tabulate(100){y => mnd.density(Array(x/10.0,y/10.0))}.mkString(" ")}.mkString("\n")
//    File(s"/tmp/component_$k.csv").write(grid)
//  }

}